-- Flyway Migration: V1__init.sql
-- Creates core tables for Iteration-1 scheduling + optional API logs.

-- ========== scheduled_posts ==========
CREATE TABLE IF NOT EXISTS scheduled_posts (
    id               BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    account_id       VARCHAR(128)    NOT NULL,
    text             VARCHAR(1000)   NOT NULL,
    run_at           TIMESTAMP WITH TIME ZONE NOT NULL,
    status           VARCHAR(16)     NOT NULL,  -- PENDING | POSTED | FAILED
    posted_tweet_id  VARCHAR(128),
    created_at       TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at       TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_scheduled_status_runat
    ON scheduled_posts (status, run_at);

CREATE INDEX IF NOT EXISTS idx_scheduled_account
    ON scheduled_posts (account_id);

-- Trigger-like behavior for updated_at in Postgres 12+: use explicit updates in JPA,
-- or add a trigger if your team prefers DB-side updates. For Iteration-1, JPA @PreUpdate is fine.


-- ========== api_logs (optional but handy for the logging requirement) ==========
-- If your teammate owns logging, you can keep this; otherwise it does no harm for Iteration-1.
CREATE TABLE IF NOT EXISTS api_logs (
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    tool         VARCHAR(64)     NOT NULL,        -- e.g., "get_home_timeline", "schedule_tweet"
    account_id   VARCHAR(128),
    params_hash  VARCHAR(128),                    -- hash of input params if you want to avoid storing raw
    status_code  INT             NOT NULL,        -- 200/400/500...
    error_msg    TEXT,
    created_at   TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS idx_api_logs_tool_created
    ON api_logs (tool, created_at);
