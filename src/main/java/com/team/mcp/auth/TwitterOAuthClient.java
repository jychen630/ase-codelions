package com.team.mcp.auth;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.UUID;
import org.springframework.stereotype.Component;

/**
 * Minimal OAuth client stub for Iteration-1.
 *
 * <p>This class simulates building an authorize URL and exchanging a
 * code for an access token. Replace the implementation with real
 * Twitter OAuth in the next iteration without changing the controller.
 */
@Component
public final class TwitterOAuthClient {

  /** Fake client id so we avoid magic strings. */
  private static final String CLIENT_ID = "demo-client";
  /** Local callback used by the controller. */
  public static final String CALLBACK =
      "http://localhost:8080/auth/callback";

  /**
   * Build an authorization URL (simulated).
   *
   * @param state CSRF state generated by the server
   * @return a fake URL you can open in a browser
   */
  public String buildAuthorizeUrl(final String state) {
    final String base = "https://example.com/oauth/authorize";
    final String url = base
        + "?response_type=code"
        + "&client_id=" + enc(CLIENT_ID)
        + "&redirect_uri=" + enc(CALLBACK)
        + "&state=" + enc(state)
        + "&scope=" + enc("tweet.read tweet.write offline.access");
    return url;
  }

  /**
   * Simulate exchanging an auth "code" for an access token.
   *
   * @param code authorization code from callback
   * @return deterministic-but-fake access token
   */
  public String exchangeCodeForAccessToken(final String code) {
    // In a real client, POST to Twitter and parse JSON.
    return "tok_" + UUID.nameUUIDFromBytes(
        code.getBytes(StandardCharsets.UTF_8)).toString();
  }

  private static String enc(final String s) {
    return URLEncoder.encode(s, StandardCharsets.UTF_8);
  }
}
